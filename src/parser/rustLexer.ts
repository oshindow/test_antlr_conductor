// Generated from rust.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class rustLexer extends antlr.Lexer {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly T__2 = 3;
    public static readonly T__3 = 4;
    public static readonly T__4 = 5;
    public static readonly T__5 = 6;
    public static readonly T__6 = 7;
    public static readonly T__7 = 8;
    public static readonly T__8 = 9;
    public static readonly T__9 = 10;
    public static readonly T__10 = 11;
    public static readonly T__11 = 12;
    public static readonly T__12 = 13;
    public static readonly T__13 = 14;
    public static readonly T__14 = 15;
    public static readonly T__15 = 16;
    public static readonly T__16 = 17;
    public static readonly T__17 = 18;
    public static readonly T__18 = 19;
    public static readonly T__19 = 20;
    public static readonly T__20 = 21;
    public static readonly T__21 = 22;
    public static readonly T__22 = 23;
    public static readonly T__23 = 24;
    public static readonly T__24 = 25;
    public static readonly T__25 = 26;
    public static readonly T__26 = 27;
    public static readonly T__27 = 28;
    public static readonly T__28 = 29;
    public static readonly T__29 = 30;
    public static readonly T__30 = 31;
    public static readonly T__31 = 32;
    public static readonly T__32 = 33;
    public static readonly T__33 = 34;
    public static readonly MUT = 35;
    public static readonly KW_ELSE = 36;
    public static readonly STRING = 37;
    public static readonly BOOL = 38;
    public static readonly IDENTIFIER = 39;
    public static readonly NUMBER = 40;
    public static readonly LINE_COMMENT = 41;
    public static readonly BLOCK_COMMENT = 42;
    public static readonly WS = 43;
    public static readonly LPAREN = 44;
    public static readonly RPAREN = 45;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'let'", "':'", "'='", "'return'", "'fn'", "'->'", "','", 
        "'for'", "'in'", "'..'", "'loop'", "'break'", "'{'", "'}'", "'struct'", 
        "'enum'", "'while'", "'if'", "'=='", "'!='", "'<'", "'<='", "'>'", 
        "'>='", "'*'", "'/'", "'+'", "'-'", "'.'", "'::'", "'match'", "'bool'", 
        "'=>'", "'_'", "'mut'", "'else'", null, null, null, null, null, 
        null, null, "'('", "')'"
    ];

    public static readonly symbolicNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, "MUT", "KW_ELSE", "STRING", "BOOL", "IDENTIFIER", "NUMBER", 
        "LINE_COMMENT", "BLOCK_COMMENT", "WS", "LPAREN", "RPAREN"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", 
        "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", 
        "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", 
        "T__24", "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
        "T__32", "T__33", "MUT", "KW_ELSE", "STRING", "BOOL", "IDENTIFIER", 
        "NUMBER", "LINE_COMMENT", "BLOCK_COMMENT", "WS", "LPAREN", "RPAREN",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, rustLexer._ATN, rustLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "rust.g4"; }

    public get literalNames(): (string | null)[] { return rustLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return rustLexer.symbolicNames; }
    public get ruleNames(): string[] { return rustLexer.ruleNames; }

    public get serializedATN(): number[] { return rustLexer._serializedATN; }

    public get channelNames(): string[] { return rustLexer.channelNames; }

    public get modeNames(): string[] { return rustLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,45,284,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
        4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
        13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
        15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,
        19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,
        24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,
        30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,
        32,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,
        36,1,36,1,36,5,36,219,8,36,10,36,12,36,222,9,36,1,36,1,36,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,235,8,37,1,38,1,38,5,
        38,239,8,38,10,38,12,38,242,9,38,1,39,4,39,245,8,39,11,39,12,39,
        246,1,40,1,40,1,40,1,40,5,40,253,8,40,10,40,12,40,256,9,40,1,40,
        1,40,1,41,1,41,1,41,1,41,5,41,264,8,41,10,41,12,41,267,9,41,1,41,
        1,41,1,41,1,41,1,41,1,42,4,42,275,8,42,11,42,12,42,276,1,42,1,42,
        1,43,1,43,1,44,1,44,2,220,265,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,1,0,6,2,0,34,34,92,92,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,10,10,13,13,
        3,0,9,10,13,13,32,32,291,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,95,1,0,0,0,5,97,1,0,0,0,7,99,
        1,0,0,0,9,106,1,0,0,0,11,109,1,0,0,0,13,112,1,0,0,0,15,114,1,0,0,
        0,17,118,1,0,0,0,19,121,1,0,0,0,21,124,1,0,0,0,23,129,1,0,0,0,25,
        135,1,0,0,0,27,137,1,0,0,0,29,139,1,0,0,0,31,146,1,0,0,0,33,151,
        1,0,0,0,35,157,1,0,0,0,37,160,1,0,0,0,39,163,1,0,0,0,41,166,1,0,
        0,0,43,168,1,0,0,0,45,171,1,0,0,0,47,173,1,0,0,0,49,176,1,0,0,0,
        51,178,1,0,0,0,53,180,1,0,0,0,55,182,1,0,0,0,57,184,1,0,0,0,59,186,
        1,0,0,0,61,189,1,0,0,0,63,195,1,0,0,0,65,200,1,0,0,0,67,203,1,0,
        0,0,69,205,1,0,0,0,71,209,1,0,0,0,73,214,1,0,0,0,75,234,1,0,0,0,
        77,236,1,0,0,0,79,244,1,0,0,0,81,248,1,0,0,0,83,259,1,0,0,0,85,274,
        1,0,0,0,87,280,1,0,0,0,89,282,1,0,0,0,91,92,5,108,0,0,92,93,5,101,
        0,0,93,94,5,116,0,0,94,2,1,0,0,0,95,96,5,58,0,0,96,4,1,0,0,0,97,
        98,5,61,0,0,98,6,1,0,0,0,99,100,5,114,0,0,100,101,5,101,0,0,101,
        102,5,116,0,0,102,103,5,117,0,0,103,104,5,114,0,0,104,105,5,110,
        0,0,105,8,1,0,0,0,106,107,5,102,0,0,107,108,5,110,0,0,108,10,1,0,
        0,0,109,110,5,45,0,0,110,111,5,62,0,0,111,12,1,0,0,0,112,113,5,44,
        0,0,113,14,1,0,0,0,114,115,5,102,0,0,115,116,5,111,0,0,116,117,5,
        114,0,0,117,16,1,0,0,0,118,119,5,105,0,0,119,120,5,110,0,0,120,18,
        1,0,0,0,121,122,5,46,0,0,122,123,5,46,0,0,123,20,1,0,0,0,124,125,
        5,108,0,0,125,126,5,111,0,0,126,127,5,111,0,0,127,128,5,112,0,0,
        128,22,1,0,0,0,129,130,5,98,0,0,130,131,5,114,0,0,131,132,5,101,
        0,0,132,133,5,97,0,0,133,134,5,107,0,0,134,24,1,0,0,0,135,136,5,
        123,0,0,136,26,1,0,0,0,137,138,5,125,0,0,138,28,1,0,0,0,139,140,
        5,115,0,0,140,141,5,116,0,0,141,142,5,114,0,0,142,143,5,117,0,0,
        143,144,5,99,0,0,144,145,5,116,0,0,145,30,1,0,0,0,146,147,5,101,
        0,0,147,148,5,110,0,0,148,149,5,117,0,0,149,150,5,109,0,0,150,32,
        1,0,0,0,151,152,5,119,0,0,152,153,5,104,0,0,153,154,5,105,0,0,154,
        155,5,108,0,0,155,156,5,101,0,0,156,34,1,0,0,0,157,158,5,105,0,0,
        158,159,5,102,0,0,159,36,1,0,0,0,160,161,5,61,0,0,161,162,5,61,0,
        0,162,38,1,0,0,0,163,164,5,33,0,0,164,165,5,61,0,0,165,40,1,0,0,
        0,166,167,5,60,0,0,167,42,1,0,0,0,168,169,5,60,0,0,169,170,5,61,
        0,0,170,44,1,0,0,0,171,172,5,62,0,0,172,46,1,0,0,0,173,174,5,62,
        0,0,174,175,5,61,0,0,175,48,1,0,0,0,176,177,5,42,0,0,177,50,1,0,
        0,0,178,179,5,47,0,0,179,52,1,0,0,0,180,181,5,43,0,0,181,54,1,0,
        0,0,182,183,5,45,0,0,183,56,1,0,0,0,184,185,5,46,0,0,185,58,1,0,
        0,0,186,187,5,58,0,0,187,188,5,58,0,0,188,60,1,0,0,0,189,190,5,109,
        0,0,190,191,5,97,0,0,191,192,5,116,0,0,192,193,5,99,0,0,193,194,
        5,104,0,0,194,62,1,0,0,0,195,196,5,98,0,0,196,197,5,111,0,0,197,
        198,5,111,0,0,198,199,5,108,0,0,199,64,1,0,0,0,200,201,5,61,0,0,
        201,202,5,62,0,0,202,66,1,0,0,0,203,204,5,95,0,0,204,68,1,0,0,0,
        205,206,5,109,0,0,206,207,5,117,0,0,207,208,5,116,0,0,208,70,1,0,
        0,0,209,210,5,101,0,0,210,211,5,108,0,0,211,212,5,115,0,0,212,213,
        5,101,0,0,213,72,1,0,0,0,214,220,5,34,0,0,215,219,8,0,0,0,216,217,
        5,92,0,0,217,219,9,0,0,0,218,215,1,0,0,0,218,216,1,0,0,0,219,222,
        1,0,0,0,220,221,1,0,0,0,220,218,1,0,0,0,221,223,1,0,0,0,222,220,
        1,0,0,0,223,224,5,34,0,0,224,74,1,0,0,0,225,226,5,116,0,0,226,227,
        5,114,0,0,227,228,5,117,0,0,228,235,5,101,0,0,229,230,5,102,0,0,
        230,231,5,97,0,0,231,232,5,108,0,0,232,233,5,115,0,0,233,235,5,101,
        0,0,234,225,1,0,0,0,234,229,1,0,0,0,235,76,1,0,0,0,236,240,7,1,0,
        0,237,239,7,2,0,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,
        0,240,241,1,0,0,0,241,78,1,0,0,0,242,240,1,0,0,0,243,245,7,3,0,0,
        244,243,1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,
        247,80,1,0,0,0,248,249,5,47,0,0,249,250,5,47,0,0,250,254,1,0,0,0,
        251,253,8,4,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,
        254,255,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,258,6,40,0,0,
        258,82,1,0,0,0,259,260,5,47,0,0,260,261,5,42,0,0,261,265,1,0,0,0,
        262,264,9,0,0,0,263,262,1,0,0,0,264,267,1,0,0,0,265,266,1,0,0,0,
        265,263,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,269,5,42,0,0,
        269,270,5,47,0,0,270,271,1,0,0,0,271,272,6,41,0,0,272,84,1,0,0,0,
        273,275,7,5,0,0,274,273,1,0,0,0,275,276,1,0,0,0,276,274,1,0,0,0,
        276,277,1,0,0,0,277,278,1,0,0,0,278,279,6,42,0,0,279,86,1,0,0,0,
        280,281,5,40,0,0,281,88,1,0,0,0,282,283,5,41,0,0,283,90,1,0,0,0,
        9,0,218,220,234,240,246,254,265,276,1,6,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!rustLexer.__ATN) {
            rustLexer.__ATN = new antlr.ATNDeserializer().deserialize(rustLexer._serializedATN);
        }

        return rustLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(rustLexer.literalNames, rustLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return rustLexer.vocabulary;
    }

    private static readonly decisionsToDFA = rustLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}